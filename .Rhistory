})
# Create a vector of column names to keep
at_to_keep <- antibiotics[!cols_to_remove]
df <- df %>%
#filter(if_all(at_to_keep, ~ grepl("S", .)))
filter(if_all(at_to_keep, ~ !grepl("R|NS|SDD|I", .)))
return(data.frame(df))
}
}
#Resistant
referred_ris1 <- function(df,ris_1,antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1))
return(data.frame(df))
}
}
#ESBL
referred_esbl <- function(df,esbl){
df <- df %>%
filter(if_any(esbl, ~ .x == '(+)'))
return(data.frame(df))
}
#Resistant to Lipopetides
referred_lipo_r <- function(df,ris_1,at_value,antibiotics){
if(length(antibiotics) !=0){
at_value <- as.numeric(gsub("[^[:alnum:]]", "", at_value))
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) & if_any(at_value, ~ .x >4))
return(data.frame(df))
}
}
#Resistant/Intermediate
referred_ris2 <- function(df,ris_1, ris_2, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2))
return(data.frame(df))
}
}
#Resistant/Intermediate/SDD
referred_ris3 <- function(df,ris_1, ris_2,ris_3, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2)| if_any(antibiotics, ~ .x == ris_3))
return(data.frame(df))
}
}
unusual_result <- function(df, org_code){
#first fifteen isolates
first_r <- referral_selector(df,org_code,'f','r')
first_r_result <- if (nrow(first_r[[1]]) != 0){referred_ris1(df,'R',first_r$rs_vec)}
first_ri <- referral_selector(df,org_code,'f','i_r')
first_ri_result <- if (nrow(first_ri[[1]]) != 0){referred_ris2(df,'R','I',first_ri$rs_vec)}
first_sd <- referral_selector(df,org_code,'f','i_r_s')
first_sd_result <- if (nrow(first_sd[[1]]) != 0){referred_ris3(df,'R','I','SDD',first_sd$rs_vec)}
first_ns <- referral_selector(df,org_code,'f','ns')
first_ns_result <- if (nrow(first_ns[[1]]) != 0){referred_ris1(df,'NS',first_ns$rs_vec)}
first_esbl <- if (org_code == 'eco'){subset(df, esbl == '(+)')}
#Bind "refer first" results
unusual_result <- rbind(first_r_result,first_ri_result,first_sd_result,first_ns_result,first_esbl)
#add new column to separate referral days and set RIS value to "R"
unusual_result$ref_days <- if ((nrow(unusual_result) != 0) && !is.null(unusual_result)) {"first"}
unusual_result$RIS <- if ((nrow(unusual_result) != 0) && !is.null(unusual_result)) {"R"}
if ((nrow(unusual_result) != 0) && !is.null(unusual_result)){
#keeps demogs column
demogs <- subset(unusual_result, select = c('accession_no','referral_date','spec_date','organismcode','RIS','spec_type','growth','esbl', 'ref_days'))
#select ris columns and remove columns will ALL NA values
at_cols <- grep("_ris", names(unusual_result), value = TRUE)
ris_result <- subset(unusual_result, select = at_cols)
ris_result <- ris_result[,colSums(is.na(ris_result))<nrow(ris_result)]
#combine demogs and ris result columns
unusual_result <- cbind(demogs, ris_result)
#remove duplicated rows
unusual_result <- unique(unusual_result)
unusual_result <- unusual_result[,colSums(is.na(unusual_result))<nrow(unusual_result)]
#edit format
unusual_result$referral_date <- format(as.Date(unusual_result$referral_date), "%Y-%m-%d")
unusual_result$spec_date <- format(as.Date(unusual_result$spec_date), "%Y-%m-%d")
unusual_result$accession_no <- sub("_", "-", unusual_result$accession_no)
duplicates <- unusual_result$accession_no[duplicated(unusual_result$accession_no)]
if (length(duplicates) !=0){
unusual_result <- unusual_result %>% distinct(accession_no, .keep_all = TRUE)
}
#sort the unusual_result in increasing order based on Accession number
unusual_result <- unusual_result[order(unusual_result$accession_no,decreasing = FALSE), ]
if (org_code == "kpn_neo"){
unusual_result$organismcode[unusual_result$organismcode == 'kpn'] <- 'kpn_neo'
}
if (nrow(unusual_result)!=0){
unusual_filename <- paste("Excel/table/",org_code,"_unusual_list2.csv", sep="")
write.csv(unusual_result, file=unusual_filename, row.names = FALSE)
final_unusual_result <- subset(unusual_result, select = c('accession_no','referral_date','spec_date','organismcode','RIS'))
#binds rows of 2 input data frames
referred_df <<- rbind(referred_df,final_unusual_result)
}
}
return(data.frame(unusual_result))
}
eco_unusual_result <- unusual_result(df_eco,'eco')
kpn_unusual_result <- unusual_result(df_kpn,'kpn')
kpn_neo_unusual_result <- unusual_result(df_kpn_neo,'kpn_neo')
aba_unusual_result <- unusual_result(df_aba,'aba')
pae_unusual_result <- unusual_result(df_pae,'pae')
efa_unusual_result <- unusual_result(df_efa,'efa')
sgc_unusual_result <- unusual_result(df_sgc,'sgc')
spy_unusual_result <- unusual_result(df_spy,'spy')
sau_unusual_result <- unusual_result(df_sau,'sau')
pan_s <- function(df, org_code, org_group){
if (org_code == 'kpn' | org_code == 'kpn_neo'){
#pan_s <- pan_s_selector(df, org_group)
at_cols <<- c('ipm_nd10_ris','ipm_nm_ris','ipm_ne_ris','mem_nd10_ris','mem_nm_ris','mem_ne_ris',
'etp_nd10_ris','etp_nm_ris','etp_ne_ris' )
pan_s_result <- if (nrow(df != 0)){referred_pan_s(df,at_cols)}
}else{
at_cols <<- grep("_ris", names(df), value = TRUE)
at_cols <<- at_cols[! at_cols %in% c("col_nm_ris","col_ne_ris")]
pan_s_result <- if (length(at_cols) != 0){referred_pan_s(df, at_cols)}
pan_s_result <- pan_s_result %>% filter(col_nm_ris !='R')
}
if ((nrow(pan_s_result) != 0)&& !is.null(pan_s_result)){
#add new column to separate referral days and set RIS value to "S"
pan_s_result$ref_days <- "pan"
pan_s_result$RIS <- "S"
#keeps demogs column
demogs <- subset(pan_s_result, select = c('accession_no','referral_date','spec_date','organismcode',
'RIS','spec_type','growth','esbl', 'ref_days'))
if (org_code == 'kpn' | org_code == 'kpn_neo'){
#select ris columns and remove columns will ALL NA values
carba_cols <- c('ipm_nd10_ris','ipm_nm_ris','ipm_ne_ris','mem_nd10_ris','mem_nm_ris','mem_ne_ris',
'etp_nd10_ris','etp_nm_ris','etp_ne_ris' )
carba_cols_check <- colnames(pan_s_result[,intersect(carba_cols, colnames(pan_s_result))])
ris_result <- subset(pan_s_result, select = carba_cols_check)
ris_result <- ris_result[,colSums(is.na(ris_result))<nrow(ris_result)]
#combine demogs and ris result columns
pan_s_result <- cbind(demogs, ris_result)
}else{
at_cols <- grep("_ris", names(pan_s_result), value = TRUE)
ris_result <- subset(pan_s_result, select = at_cols)
ris_result <- ris_result[,colSums(is.na(ris_result))<nrow(ris_result)]
#combine demogs and ris result columns
pan_s_result <- cbind(demogs, ris_result)
}
#edit format
pan_s_result$referral_date <- format(as.Date(pan_s_result$referral_date), "%Y-%m-%d")
pan_s_result$spec_date <- format(as.Date(pan_s_result$spec_date), "%Y-%m-%d")
pan_s_result$accession_no <- sub("_", "-", pan_s_result$accession_no)
if (org_code == "kpn_neo"){
pan_s_result$organismcode[pan_s_result$organismcode == 'kpn'] <- 'kpn_neo'
}
if (nrow(pan_s_result)!=0){
unusual_filename <- paste("Excel/table/",org_code,"_pan_s_result2.csv", sep="")
write.csv(pan_s_result, file=unusual_filename, row.names = FALSE)
final_unusual_result <- subset(pan_s_result, select = c('accession_no','referral_date','spec_date','organismcode','RIS'))
#binds rows of 2 input data frames
referred_df <<- rbind(referred_df,final_unusual_result)
return(data.frame(pan_s_result))
}
}
}
eco_pan_s_result <- pan_s(df_eco,'eco','ebc')
kpn_pan_s_result <- pan_s(df_kpn,'kpn','ebc')
kpn_neo_pan_s_result <- pan_s(df_kpn_neo,'kpn_neo','ebc')
aba_pan_s_result <- pan_s(df_aba,'aba','ac')
pae_pan_s_result <- pan_s(df_pae,'pae','pae')
efa_pan_s_result <- pan_s(df_efa,'efa','ent')
sgc_pan_s_result <- pan_s(df_sgc,'sgc','bs')
spy_pan_s_result <- pan_s(df_spy,'spy','bs')
sau_pan_s_result <- pan_s(df_sau,'sau','sta')
#sort the unusual_result in increasing order based on Accession number
referred_df <- referred_df[order(referred_df$organismcode,decreasing = FALSE), ]
write.csv(referred_df, file="Excel/table/summary_unusual_result.csv", row.names = FALSE)
#ac_list <- df_monitoring$ACCESSION_NO
#df_reference <- df %>% filter(accession_no %in% ac_list)
#df_reference_diff <- df %>% filter(!accession_no %in% ac_list)
#ac_list_ref <- df$accession_no
#ac_diff <- setdiff(ac_list, ac_list_ref)
#df_monitoring_remove <- df_monitoring %>% filter(ACCESSION_NO %in% ac_diff)
#unusual_filename <- paste("Excel/", AccessionNo, "_unusual_result.csv", sep="")
#write.csv(df_final, file="Excel/referred_unusual_result.csv", row.names = FALSE)
View(df_monitoring)
existing_ac
View(site_df_data)
library(tidyverse)
library(dplyr)
library(knitr)
library(kableExtra)
library(tinytex)
library(readxl)
library(round)
library(stringr)
library(pander)
library(janitor)
library(lubridate)
library(data.table)
library(conflicted)
library(xlsx)
library(openxlsx)
library(svDialogs)
conflicts_prefer(dplyr::filter)
conflicts_prefer(openxlsx::loadWorkbook)
conflicts_prefer(openxlsx::saveWorkbook)
setwd("D:/ALLYSA FILES/DMU Projects/referable-isolates")
#reading data file
df <- read_xlsx("Excel/Combined Data on Referred Isolates_3.7.25.xlsx", sheet = "ARSRL")
AccessionNo <- dlgInput("Enter a site code:", Sys.info()[" "])$res
# Transform column names to upper case
colnames(df) <- tolower(colnames(df))
names(df)[names(df) == 'accessionno'] <- 'accession_no'
colnames(df) <- gsub(' ', '_', colnames(df))
#filter dataframe based on site code
site_df <- df %>%
filter(grepl(AccessionNo, accession_no))
#lOad updated monitoring
df_monitoring <- read_xlsx("Excel/Referred Isolates Monitoring 2024 (ARSRL RESULT)  as of Feb 28, 2025.xlsx", sheet = "all")
df_monitoring <-  df_monitoring %>% remove_empty(c("rows"))
site_df_data <- df_monitoring %>%
filter(grepl(AccessionNo, ACCESSION_NO))
#list all existing accession number
existing_ac <- site_df_data$ACCESSION_NO
existing_ac <- gsub('-', '_', existing_ac)
#remove accession number in the monitoring form
site_df <- site_df[!site_df$accession_no %in% existing_ac, ]
site_df$spec_date <- format(as.Date(site_df$spec_date), "%Y-%m-%d")
valid_specdate <- c("2024-06","2024-07","2024-08","2024-09","2024-10","2024-11","2024-12")
kpn_valid_specdate <- c("2024-09","2024-10","2024-11","2024-12","2025-01", "2025-02", "2025-03")
site_df <- filter(site_df, str_detect(spec_date, paste(valid_specdate, collapse="|")))
site_df2 <- filter(site_df, str_detect(spec_date, paste(kpn_valid_specdate, collapse="|")))
site_filename <- paste("Excel/","df_",AccessionNo,".csv",sep = "")
site2_filename <- paste("Excel/","df_",AccessionNo,"_2.csv",sep = "")
write.csv(site_df, file=site_filename)
write.csv(site_df2, file=site2_filename)
#setwd("D:/ALLYSA FILE/2024/DMU Projects/referable-isolates")
org_dataframe <- function(df,org){
#List all organism based on organism group
org_path <- "Excel/ORG GROUPINGS_09042024.xlsx"
df_org <- read_xlsx(org_path, sheet = org)
org_vec <- na.omit(df_org[['ORG']])
org_df <- df[df$organismcode %in% org_vec, ]
#List sterile and non-sterile samples
sample_path <- "Excel/SPCLIST_2024referrables_08292024.xlsx"
ss_df <- read_xlsx(sample_path, sheet = org)
ss_vec <- na.omit(ss_df[['C_ENGLISH']])
#Generate dataframe for referral regardless of date
org_df <- org_df[org_df$spec_type %in% ss_vec, ]
#filter dataframe based on urine count
org_df$urine_colct <- as.numeric(gsub("\\D", "", org_df$urine_colct ))
org_df <- subset(org_df, org_df$urine_colct  > 10000 | is.na(org_df$urine_colct ))
#org_filename <- paste("Excel/table/","df_",org,".csv",sep = "")
#write.csv(org_df, file=org_filename)
return(data.frame(org_df))
}
df_eco <- org_dataframe(site_df,'eco')
df_kpn <- org_dataframe(site_df2,'kpn')
df_kpn_neo <- org_dataframe(site_df2,'kpn_neo')
df_aba <- org_dataframe(site_df,'aba')
df_pae <- org_dataframe(site_df,'pae')
df_efa <- org_dataframe(site_df,'efa')
df_sgc <- org_dataframe(site_df,'sgc')
df_spy <- org_dataframe(site_df,'spy')
df_sau <- org_dataframe(site_df,'sau')
neo_age <- c("0", "1d", "2d", "3d", "4d", "5d", "6d", "7d", "8d", "9d", "10d", "11d", "12d", "13d", "14d"
, "15d", "16d", "17d", "18d", "19d", "20d", "21d", "22d", "23d", "24d", "25d", "26d", "27d", "28d")
df_kpn_neo <- df_kpn_neo[df_kpn_neo$age %in% neo_age, ]
#create empty dataframe for summary
referred_df <- data.frame(accession_no = character(),
referral_date = character(),
spec_date = character(),
organismcode = character(),
RIS = character(),
stringsAsFactors = FALSE)
#Selecting antibitics based on referral date and RIS result
referral_selector <- function(df,sheet_name,ref_days,ris_result){
antibiotic_path <- "Excel/whonet_data_summary_referred_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_df <- rs_df[rs_df$REF_DAYS == ref_days & rs_df$RIS == ris_result, ]
rs_vec <- rs_df[['WHON5_CODE_LW']]
rs_vec <- paste(rs_vec,'ris', sep = '_')
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
pan_s_selector <- function(df,sheet_name){
antibiotic_path <- "Excel/CLSI_ORG_ATC_updated.xlsx"
rs_df <- read_xlsx(antibiotic_path, sheet = sheet_name)
rs_vec <- c(rs_df[['WHON5_CODE_DISK']], rs_df[['WHON5_CODE_MIC']], rs_df[['WHON5_CODE_ETEST']])
#list existing columns only in the dataframe included in the antibiotic list
rs_vec <- intersect(rs_vec, colnames(df))
#return(data.frame(rs_df))
return(list(data.frame(rs_df), rs_vec = rs_vec))
}
#Pan susceptible
referred_pan_s <- function(df,antibiotics){
if(length(antibiotics) !=0){
#Check if columns in columns_to_check have all NA values
cols_to_remove <- sapply(antibiotics, function(col) {
all(is.na(df[[col]]))
})
# Create a vector of column names to keep
at_to_keep <- antibiotics[!cols_to_remove]
df <- df %>%
#filter(if_all(at_to_keep, ~ grepl("S", .)))
filter(if_all(at_to_keep, ~ !grepl("R|NS|SDD|I", .)))
return(data.frame(df))
}
}
#Pan susceptible KPN
kpn_referred_pan_s <- function(df,antibiotics){
if(length(antibiotics) !=0){
#Check if columns in columns_to_check have all NA values
cols_to_remove <- sapply(antibiotics, function(col) {
all(is.na(df[[col]]))
})
# Create a vector of column names to keep
at_to_keep <- antibiotics[!cols_to_remove]
df <- df %>%
#filter(if_all(at_to_keep, ~ grepl("S", .)))
filter(if_all(at_to_keep, ~ !grepl("R|NS|SDD|I", .)))
return(data.frame(df))
}
}
#Resistant
referred_ris1 <- function(df,ris_1,antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1))
return(data.frame(df))
}
}
#ESBL
referred_esbl <- function(df,esbl){
df <- df %>%
filter(if_any(esbl, ~ .x == '(+)'))
return(data.frame(df))
}
#Resistant to Lipopetides
referred_lipo_r <- function(df,ris_1,at_value,antibiotics){
if(length(antibiotics) !=0){
at_value <- as.numeric(gsub("[^[:alnum:]]", "", at_value))
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) & if_any(at_value, ~ .x >4))
return(data.frame(df))
}
}
#Resistant/Intermediate
referred_ris2 <- function(df,ris_1, ris_2, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2))
return(data.frame(df))
}
}
#Resistant/Intermediate/SDD
referred_ris3 <- function(df,ris_1, ris_2,ris_3, antibiotics){
if(length(antibiotics) !=0){
df <- df %>%
filter(if_any(antibiotics, ~ .x == ris_1) | if_any(antibiotics, ~ .x == ris_2)| if_any(antibiotics, ~ .x == ris_3))
return(data.frame(df))
}
}
unusual_result <- function(df, org_code){
#first fifteen isolates
first_r <- referral_selector(df,org_code,'f','r')
first_r_result <- if (nrow(first_r[[1]]) != 0){referred_ris1(df,'R',first_r$rs_vec)}
first_ri <- referral_selector(df,org_code,'f','i_r')
first_ri_result <- if (nrow(first_ri[[1]]) != 0){referred_ris2(df,'R','I',first_ri$rs_vec)}
first_sd <- referral_selector(df,org_code,'f','i_r_s')
first_sd_result <- if (nrow(first_sd[[1]]) != 0){referred_ris3(df,'R','I','SDD',first_sd$rs_vec)}
first_ns <- referral_selector(df,org_code,'f','ns')
first_ns_result <- if (nrow(first_ns[[1]]) != 0){referred_ris1(df,'NS',first_ns$rs_vec)}
first_esbl <- if (org_code == 'eco'){subset(df, esbl == '(+)')}
#Bind "refer first" results
unusual_result <- rbind(first_r_result,first_ri_result,first_sd_result,first_ns_result,first_esbl)
#add new column to separate referral days and set RIS value to "R"
unusual_result$ref_days <- if ((nrow(unusual_result) != 0) && !is.null(unusual_result)) {"first"}
unusual_result$RIS <- if ((nrow(unusual_result) != 0) && !is.null(unusual_result)) {"R"}
if ((nrow(unusual_result) != 0) && !is.null(unusual_result)){
#keeps demogs column
demogs <- subset(unusual_result, select = c('accession_no','referral_date','spec_date','organismcode','RIS','spec_type','growth','esbl', 'ref_days'))
#select ris columns and remove columns will ALL NA values
at_cols <- grep("_ris", names(unusual_result), value = TRUE)
ris_result <- subset(unusual_result, select = at_cols)
ris_result <- ris_result[,colSums(is.na(ris_result))<nrow(ris_result)]
#combine demogs and ris result columns
unusual_result <- cbind(demogs, ris_result)
#remove duplicated rows
unusual_result <- unique(unusual_result)
unusual_result <- unusual_result[,colSums(is.na(unusual_result))<nrow(unusual_result)]
#edit format
unusual_result$referral_date <- format(as.Date(unusual_result$referral_date), "%Y-%m-%d")
unusual_result$spec_date <- format(as.Date(unusual_result$spec_date), "%Y-%m-%d")
unusual_result$accession_no <- sub("_", "-", unusual_result$accession_no)
duplicates <- unusual_result$accession_no[duplicated(unusual_result$accession_no)]
if (length(duplicates) !=0){
unusual_result <- unusual_result %>% distinct(accession_no, .keep_all = TRUE)
}
#sort the unusual_result in increasing order based on Accession number
unusual_result <- unusual_result[order(unusual_result$accession_no,decreasing = FALSE), ]
if (org_code == "kpn_neo"){
unusual_result$organismcode[unusual_result$organismcode == 'kpn'] <- 'kpn_neo'
}
if (nrow(unusual_result)!=0){
unusual_filename <- paste("Excel/table/",org_code,"_unusual_list2.csv", sep="")
write.csv(unusual_result, file=unusual_filename, row.names = FALSE)
final_unusual_result <- subset(unusual_result, select = c('accession_no','referral_date','spec_date','organismcode','RIS'))
#binds rows of 2 input data frames
referred_df <<- rbind(referred_df,final_unusual_result)
}
}
return(data.frame(unusual_result))
}
eco_unusual_result <- unusual_result(df_eco,'eco')
kpn_unusual_result <- unusual_result(df_kpn,'kpn')
kpn_neo_unusual_result <- unusual_result(df_kpn_neo,'kpn_neo')
aba_unusual_result <- unusual_result(df_aba,'aba')
pae_unusual_result <- unusual_result(df_pae,'pae')
efa_unusual_result <- unusual_result(df_efa,'efa')
sgc_unusual_result <- unusual_result(df_sgc,'sgc')
spy_unusual_result <- unusual_result(df_spy,'spy')
sau_unusual_result <- unusual_result(df_sau,'sau')
pan_s <- function(df, org_code, org_group){
if (org_code == 'kpn' | org_code == 'kpn_neo'){
#pan_s <- pan_s_selector(df, org_group)
at_cols <<- c('ipm_nd10_ris','ipm_nm_ris','ipm_ne_ris','mem_nd10_ris','mem_nm_ris','mem_ne_ris',
'etp_nd10_ris','etp_nm_ris','etp_ne_ris' )
pan_s_result <- if (nrow(df != 0)){referred_pan_s(df,at_cols)}
}else{
at_cols <<- grep("_ris", names(df), value = TRUE)
at_cols <<- at_cols[! at_cols %in% c("col_nm_ris","col_ne_ris")]
pan_s_result <- if (length(at_cols) != 0){referred_pan_s(df, at_cols)}
pan_s_result <- pan_s_result %>% filter(col_nm_ris !='R')
}
if ((nrow(pan_s_result) != 0)&& !is.null(pan_s_result)){
#add new column to separate referral days and set RIS value to "S"
pan_s_result$ref_days <- "pan"
pan_s_result$RIS <- "S"
#keeps demogs column
demogs <- subset(pan_s_result, select = c('accession_no','referral_date','spec_date','organismcode',
'RIS','spec_type','growth','esbl', 'ref_days'))
if (org_code == 'kpn' | org_code == 'kpn_neo'){
#select ris columns and remove columns will ALL NA values
carba_cols <- c('ipm_nd10_ris','ipm_nm_ris','ipm_ne_ris','mem_nd10_ris','mem_nm_ris','mem_ne_ris',
'etp_nd10_ris','etp_nm_ris','etp_ne_ris' )
carba_cols_check <- colnames(pan_s_result[,intersect(carba_cols, colnames(pan_s_result))])
ris_result <- subset(pan_s_result, select = carba_cols_check)
ris_result <- ris_result[,colSums(is.na(ris_result))<nrow(ris_result)]
#combine demogs and ris result columns
pan_s_result <- cbind(demogs, ris_result)
}else{
at_cols <- grep("_ris", names(pan_s_result), value = TRUE)
ris_result <- subset(pan_s_result, select = at_cols)
ris_result <- ris_result[,colSums(is.na(ris_result))<nrow(ris_result)]
#combine demogs and ris result columns
pan_s_result <- cbind(demogs, ris_result)
}
#edit format
pan_s_result$referral_date <- format(as.Date(pan_s_result$referral_date), "%Y-%m-%d")
pan_s_result$spec_date <- format(as.Date(pan_s_result$spec_date), "%Y-%m-%d")
pan_s_result$accession_no <- sub("_", "-", pan_s_result$accession_no)
if (org_code == "kpn_neo"){
pan_s_result$organismcode[pan_s_result$organismcode == 'kpn'] <- 'kpn_neo'
}
if (nrow(pan_s_result)!=0){
unusual_filename <- paste("Excel/table/",org_code,"_pan_s_result2.csv", sep="")
write.csv(pan_s_result, file=unusual_filename, row.names = FALSE)
final_unusual_result <- subset(pan_s_result, select = c('accession_no','referral_date','spec_date','organismcode','RIS'))
#binds rows of 2 input data frames
referred_df <<- rbind(referred_df,final_unusual_result)
return(data.frame(pan_s_result))
}
}
}
eco_pan_s_result <- pan_s(df_eco,'eco','ebc')
kpn_pan_s_result <- pan_s(df_kpn,'kpn','ebc')
kpn_neo_pan_s_result <- pan_s(df_kpn_neo,'kpn_neo','ebc')
aba_pan_s_result <- pan_s(df_aba,'aba','ac')
pae_pan_s_result <- pan_s(df_pae,'pae','pae')
efa_pan_s_result <- pan_s(df_efa,'efa','ent')
sgc_pan_s_result <- pan_s(df_sgc,'sgc','bs')
spy_pan_s_result <- pan_s(df_spy,'spy','bs')
sau_pan_s_result <- pan_s(df_sau,'sau','sta')
#sort the unusual_result in increasing order based on Accession number
referred_df <- referred_df[order(referred_df$organismcode,decreasing = FALSE), ]
write.csv(referred_df, file="Excel/table/summary_unusual_result.csv", row.names = FALSE)
#ac_list <- df_monitoring$ACCESSION_NO
#df_reference <- df %>% filter(accession_no %in% ac_list)
#df_reference_diff <- df %>% filter(!accession_no %in% ac_list)
#ac_list_ref <- df$accession_no
#ac_diff <- setdiff(ac_list, ac_list_ref)
#df_monitoring_remove <- df_monitoring %>% filter(ACCESSION_NO %in% ac_diff)
#unusual_filename <- paste("Excel/", AccessionNo, "_unusual_result.csv", sep="")
#write.csv(df_final, file="Excel/referred_unusual_result.csv", row.names = FALSE)
View(site_df_data)
View(df)
View(df)
View(site_df_data)
View(site_df)
View(site_df2)
library(tidyverse)
library(readxl)
library(dplyr)
library(svDialogs)
library(xlsx)
library(conflicted)
library(DBI)
library(lubridate)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::lag)
#set working directory
setwd("D:/ALLYSA FILES/DMU Projects/whonet_data_cleaning")
df <- read.xlsx("reference/Combined Data on 2024 Referred Isolates_3.10.25.xlsx", sheetName = "Sentinel Site")
